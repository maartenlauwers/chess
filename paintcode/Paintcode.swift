//
//  Paintcode.swift
//  Chess
//
//  Created by Maarten Lauwers on 25/12/2021.
//  Copyright Â© 2021 Maarten Lauwers. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import Cocoa

public class Paintcode : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawKing_white(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Color Declarations
        let strokeColor = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let fillColor = NSColor(red: 1, green: 1, blue: 1, alpha: 1)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 21.5, y: 32.37))
        bezierPath.line(to: NSPoint(x: 21.5, y: 38))
        strokeColor.setStroke()
        bezierPath.lineWidth = 1.5
        bezierPath.miterLimit = 4
        bezierPath.lineCapStyle = .round
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = NSBezierPath()
        bezier2Path.move(to: NSPoint(x: 19, y: 36))
        bezier2Path.line(to: NSPoint(x: 24, y: 36))
        strokeColor.setStroke()
        bezier2Path.lineWidth = 1.5
        bezier2Path.miterLimit = 4
        bezier2Path.lineCapStyle = .round
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = NSBezierPath()
        bezier3Path.move(to: NSPoint(x: 21.5, y: 19))
        bezier3Path.curve(to: NSPoint(x: 24.5, y: 29.5), controlPoint1: NSPoint(x: 21.5, y: 19), controlPoint2: NSPoint(x: 26, y: 26.5))
        bezier3Path.curve(to: NSPoint(x: 21.5, y: 32), controlPoint1: NSPoint(x: 24.5, y: 29.5), controlPoint2: NSPoint(x: 23.5, y: 32))
        bezier3Path.curve(to: NSPoint(x: 18.5, y: 29.5), controlPoint1: NSPoint(x: 19.5, y: 32), controlPoint2: NSPoint(x: 18.5, y: 29.5))
        bezier3Path.curve(to: NSPoint(x: 21.5, y: 19), controlPoint1: NSPoint(x: 17, y: 26.5), controlPoint2: NSPoint(x: 21.5, y: 19))
        bezier3Path.close()
        bezier3Path.windingRule = .evenOdd
        fillColor.setFill()
        bezier3Path.fill()
        strokeColor.setStroke()
        bezier3Path.lineWidth = 1.5
        bezier3Path.miterLimit = 4
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = NSBezierPath()
        bezier4Path.move(to: NSPoint(x: 10.5, y: 7))
        bezier4Path.curve(to: NSPoint(x: 31.5, y: 7), controlPoint1: NSPoint(x: 16, y: 3.5), controlPoint2: NSPoint(x: 26, y: 3.5))
        bezier4Path.line(to: NSPoint(x: 31.5, y: 14))
        bezier4Path.curve(to: NSPoint(x: 37.5, y: 24.5), controlPoint1: NSPoint(x: 31.5, y: 14), controlPoint2: NSPoint(x: 40.5, y: 18.5))
        bezier4Path.curve(to: NSPoint(x: 21.5, y: 20.5), controlPoint1: NSPoint(x: 33.5, y: 31), controlPoint2: NSPoint(x: 24, y: 28))
        bezier4Path.line(to: NSPoint(x: 21.5, y: 17))
        bezier4Path.line(to: NSPoint(x: 21.5, y: 20.5))
        bezier4Path.curve(to: NSPoint(x: 5.5, y: 24.5), controlPoint1: NSPoint(x: 18, y: 28), controlPoint2: NSPoint(x: 8.5, y: 31))
        bezier4Path.curve(to: NSPoint(x: 10.5, y: 14.5), controlPoint1: NSPoint(x: 2.5, y: 18.5), controlPoint2: NSPoint(x: 10.5, y: 14.5))
        bezier4Path.line(to: NSPoint(x: 10.5, y: 7))
        bezier4Path.close()
        bezier4Path.windingRule = .evenOdd
        fillColor.setFill()
        bezier4Path.fill()
        strokeColor.setStroke()
        bezier4Path.lineWidth = 1.5
        bezier4Path.miterLimit = 4
        bezier4Path.lineCapStyle = .round
        bezier4Path.lineJoinStyle = .round
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = NSBezierPath()
        bezier5Path.move(to: NSPoint(x: 10.5, y: 14))
        bezier5Path.curve(to: NSPoint(x: 31.5, y: 14), controlPoint1: NSPoint(x: 16, y: 17), controlPoint2: NSPoint(x: 26, y: 17))
        strokeColor.setStroke()
        bezier5Path.lineWidth = 1.5
        bezier5Path.miterLimit = 4
        bezier5Path.lineCapStyle = .round
        bezier5Path.lineJoinStyle = .round
        bezier5Path.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = NSBezierPath()
        bezier6Path.move(to: NSPoint(x: 10.5, y: 10.5))
        bezier6Path.curve(to: NSPoint(x: 31.5, y: 10.5), controlPoint1: NSPoint(x: 16, y: 13.5), controlPoint2: NSPoint(x: 26, y: 13.5))
        strokeColor.setStroke()
        bezier6Path.lineWidth = 1.5
        bezier6Path.miterLimit = 4
        bezier6Path.lineCapStyle = .round
        bezier6Path.lineJoinStyle = .round
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = NSBezierPath()
        bezier7Path.move(to: NSPoint(x: 10.5, y: 7))
        bezier7Path.curve(to: NSPoint(x: 31.5, y: 7), controlPoint1: NSPoint(x: 16, y: 10), controlPoint2: NSPoint(x: 26, y: 10))
        strokeColor.setStroke()
        bezier7Path.lineWidth = 1.5
        bezier7Path.miterLimit = 4
        bezier7Path.lineCapStyle = .round
        bezier7Path.lineJoinStyle = .round
        bezier7Path.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawKing_black(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Color Declarations
        let strokeColor = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let fillColor2 = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let strokeColor2 = NSColor(red: 1, green: 1, blue: 1, alpha: 1)

        //// Group 9
        //// Bezier 25 Drawing
        let bezier25Path = NSBezierPath()
        bezier25Path.move(to: NSPoint(x: 21.5, y: 32.37))
        bezier25Path.line(to: NSPoint(x: 21.5, y: 38))
        strokeColor.setStroke()
        bezier25Path.lineWidth = 1.5
        bezier25Path.miterLimit = 4
        bezier25Path.lineCapStyle = .round
        bezier25Path.stroke()


        //// Bezier 26 Drawing
        let bezier26Path = NSBezierPath()
        bezier26Path.move(to: NSPoint(x: 21.5, y: 19))
        bezier26Path.curve(to: NSPoint(x: 24.5, y: 29.5), controlPoint1: NSPoint(x: 21.5, y: 19), controlPoint2: NSPoint(x: 26, y: 26.5))
        bezier26Path.curve(to: NSPoint(x: 21.5, y: 32), controlPoint1: NSPoint(x: 24.5, y: 29.5), controlPoint2: NSPoint(x: 23.5, y: 32))
        bezier26Path.curve(to: NSPoint(x: 18.5, y: 29.5), controlPoint1: NSPoint(x: 19.5, y: 32), controlPoint2: NSPoint(x: 18.5, y: 29.5))
        bezier26Path.curve(to: NSPoint(x: 21.5, y: 19), controlPoint1: NSPoint(x: 17, y: 26.5), controlPoint2: NSPoint(x: 21.5, y: 19))
        bezier26Path.close()
        bezier26Path.windingRule = .evenOdd
        fillColor2.setFill()
        bezier26Path.fill()
        strokeColor.setStroke()
        bezier26Path.lineWidth = 1.5
        bezier26Path.miterLimit = 4
        bezier26Path.stroke()


        //// Bezier 27 Drawing
        let bezier27Path = NSBezierPath()
        bezier27Path.move(to: NSPoint(x: 10.5, y: 7))
        bezier27Path.curve(to: NSPoint(x: 31.5, y: 7), controlPoint1: NSPoint(x: 16, y: 3.5), controlPoint2: NSPoint(x: 26, y: 3.5))
        bezier27Path.line(to: NSPoint(x: 31.5, y: 14))
        bezier27Path.curve(to: NSPoint(x: 37.5, y: 24.5), controlPoint1: NSPoint(x: 31.5, y: 14), controlPoint2: NSPoint(x: 40.5, y: 18.5))
        bezier27Path.curve(to: NSPoint(x: 21.5, y: 20.5), controlPoint1: NSPoint(x: 33.5, y: 31), controlPoint2: NSPoint(x: 24, y: 28))
        bezier27Path.line(to: NSPoint(x: 21.5, y: 17))
        bezier27Path.line(to: NSPoint(x: 21.5, y: 20.5))
        bezier27Path.curve(to: NSPoint(x: 5.5, y: 24.5), controlPoint1: NSPoint(x: 18, y: 28), controlPoint2: NSPoint(x: 8.5, y: 31))
        bezier27Path.curve(to: NSPoint(x: 10.5, y: 14.5), controlPoint1: NSPoint(x: 2.5, y: 18.5), controlPoint2: NSPoint(x: 10.5, y: 14.5))
        bezier27Path.line(to: NSPoint(x: 10.5, y: 7))
        bezier27Path.close()
        bezier27Path.windingRule = .evenOdd
        fillColor2.setFill()
        bezier27Path.fill()
        strokeColor.setStroke()
        bezier27Path.lineWidth = 1.5
        bezier27Path.miterLimit = 4
        bezier27Path.lineCapStyle = .round
        bezier27Path.lineJoinStyle = .round
        bezier27Path.stroke()


        //// Bezier 28 Drawing
        let bezier28Path = NSBezierPath()
        bezier28Path.move(to: NSPoint(x: 19, y: 36))
        bezier28Path.line(to: NSPoint(x: 24, y: 36))
        strokeColor.setStroke()
        bezier28Path.lineWidth = 1.5
        bezier28Path.miterLimit = 4
        bezier28Path.lineCapStyle = .round
        bezier28Path.stroke()


        //// Bezier 29 Drawing
        let bezier29Path = NSBezierPath()
        bezier29Path.move(to: NSPoint(x: 31, y: 14.5))
        bezier29Path.curve(to: NSPoint(x: 37.03, y: 24.15), controlPoint1: NSPoint(x: 31, y: 14.5), controlPoint2: NSPoint(x: 39.5, y: 18.5))
        bezier29Path.curve(to: NSPoint(x: 21.5, y: 19.5), controlPoint1: NSPoint(x: 33.15, y: 30), controlPoint2: NSPoint(x: 24, y: 26))
        bezier29Path.line(to: NSPoint(x: 21.51, y: 17.4))
        bezier29Path.line(to: NSPoint(x: 21.5, y: 19.5))
        bezier29Path.curve(to: NSPoint(x: 6, y: 24.15), controlPoint1: NSPoint(x: 19, y: 26), controlPoint2: NSPoint(x: 8.91, y: 30))
        bezier29Path.curve(to: NSPoint(x: 10.85, y: 15.15), controlPoint1: NSPoint(x: 3.5, y: 18.5), controlPoint2: NSPoint(x: 10.85, y: 15.15))
        strokeColor2.setStroke()
        bezier29Path.lineWidth = 1.5
        bezier29Path.miterLimit = 4
        bezier29Path.lineCapStyle = .round
        bezier29Path.lineJoinStyle = .round
        bezier29Path.stroke()


        //// Bezier 30 Drawing
        let bezier30Path = NSBezierPath()
        bezier30Path.move(to: NSPoint(x: 10.5, y: 14))
        bezier30Path.curve(to: NSPoint(x: 31.5, y: 14), controlPoint1: NSPoint(x: 16, y: 17), controlPoint2: NSPoint(x: 26, y: 17))
        bezier30Path.move(to: NSPoint(x: 10.5, y: 10.5))
        bezier30Path.curve(to: NSPoint(x: 31.5, y: 10.5), controlPoint1: NSPoint(x: 16, y: 13.5), controlPoint2: NSPoint(x: 26, y: 13.5))
        bezier30Path.move(to: NSPoint(x: 10.5, y: 7))
        bezier30Path.curve(to: NSPoint(x: 31.5, y: 7), controlPoint1: NSPoint(x: 16, y: 10), controlPoint2: NSPoint(x: 26, y: 10))
        strokeColor2.setStroke()
        bezier30Path.lineWidth = 1.5
        bezier30Path.miterLimit = 4
        bezier30Path.lineCapStyle = .round
        bezier30Path.lineJoinStyle = .round
        bezier30Path.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawQueen_white(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Color Declarations
        let strokeColor = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let fillColor = NSColor(red: 1, green: 1, blue: 1, alpha: 1)

        //// Group 3
        //// Bezier 8 Drawing
        let bezier8Path = NSBezierPath()
        bezier8Path.move(to: NSPoint(x: 7, y: 32))
        bezier8Path.line(to: NSPoint(x: 7, y: 32))
        bezier8Path.curve(to: NSPoint(x: 5, y: 30), controlPoint1: NSPoint(x: 7, y: 30.9), controlPoint2: NSPoint(x: 6.1, y: 30))
        bezier8Path.curve(to: NSPoint(x: 3, y: 32), controlPoint1: NSPoint(x: 3.9, y: 30), controlPoint2: NSPoint(x: 3, y: 30.9))
        bezier8Path.line(to: NSPoint(x: 3, y: 32))
        bezier8Path.curve(to: NSPoint(x: 5, y: 34), controlPoint1: NSPoint(x: 3, y: 33.1), controlPoint2: NSPoint(x: 3.9, y: 34))
        bezier8Path.curve(to: NSPoint(x: 7, y: 32), controlPoint1: NSPoint(x: 6.1, y: 34), controlPoint2: NSPoint(x: 7, y: 33.1))
        bezier8Path.close()
        bezier8Path.windingRule = .evenOdd
        fillColor.setFill()
        bezier8Path.fill()
        strokeColor.setStroke()
        bezier8Path.lineWidth = 1.5
        bezier8Path.miterLimit = 4
        bezier8Path.lineCapStyle = .round
        bezier8Path.lineJoinStyle = .round
        bezier8Path.stroke()


        //// Oval Drawing
        let ovalPath = NSBezierPath(ovalIn: NSRect(x: 19.5, y: 34.5, width: 4, height: 4))
        fillColor.setFill()
        ovalPath.fill()
        strokeColor.setStroke()
        ovalPath.lineWidth = 1.5
        ovalPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = NSBezierPath(ovalIn: NSRect(x: 36, y: 30, width: 4, height: 4))
        fillColor.setFill()
        oval2Path.fill()
        strokeColor.setStroke()
        oval2Path.lineWidth = 1.5
        oval2Path.stroke()


        //// Oval 3 Drawing
        let oval3Path = NSBezierPath(ovalIn: NSRect(x: 11, y: 33.5, width: 4, height: 4))
        fillColor.setFill()
        oval3Path.fill()
        strokeColor.setStroke()
        oval3Path.lineWidth = 1.5
        oval3Path.stroke()


        //// Bezier 9 Drawing
        let bezier9Path = NSBezierPath()
        bezier9Path.move(to: NSPoint(x: 32, y: 35))
        bezier9Path.line(to: NSPoint(x: 32, y: 35))
        bezier9Path.curve(to: NSPoint(x: 30, y: 33), controlPoint1: NSPoint(x: 32, y: 33.9), controlPoint2: NSPoint(x: 31.1, y: 33))
        bezier9Path.curve(to: NSPoint(x: 28, y: 35), controlPoint1: NSPoint(x: 28.9, y: 33), controlPoint2: NSPoint(x: 28, y: 33.9))
        bezier9Path.line(to: NSPoint(x: 28, y: 35))
        bezier9Path.curve(to: NSPoint(x: 30, y: 37), controlPoint1: NSPoint(x: 28, y: 36.1), controlPoint2: NSPoint(x: 28.9, y: 37))
        bezier9Path.curve(to: NSPoint(x: 32, y: 35), controlPoint1: NSPoint(x: 31.1, y: 37), controlPoint2: NSPoint(x: 32, y: 36.1))
        bezier9Path.close()
        bezier9Path.windingRule = .evenOdd
        fillColor.setFill()
        bezier9Path.fill()
        strokeColor.setStroke()
        bezier9Path.lineWidth = 1.5
        bezier9Path.miterLimit = 4
        bezier9Path.lineCapStyle = .round
        bezier9Path.lineJoinStyle = .round
        bezier9Path.stroke()


        //// Bezier 10 Drawing
        let bezier10Path = NSBezierPath()
        bezier10Path.move(to: NSPoint(x: 8, y: 18))
        bezier10Path.curve(to: NSPoint(x: 35, y: 18), controlPoint1: NSPoint(x: 16.5, y: 19.5), controlPoint2: NSPoint(x: 29, y: 19.5))
        bezier10Path.line(to: NSPoint(x: 37, y: 30))
        bezier10Path.line(to: NSPoint(x: 30, y: 19))
        bezier10Path.line(to: NSPoint(x: 30, y: 33))
        bezier10Path.line(to: NSPoint(x: 24.5, y: 19.5))
        bezier10Path.line(to: NSPoint(x: 21.5, y: 34.5))
        bezier10Path.line(to: NSPoint(x: 18.5, y: 19.5))
        bezier10Path.line(to: NSPoint(x: 13, y: 33.5))
        bezier10Path.line(to: NSPoint(x: 13, y: 19))
        bezier10Path.line(to: NSPoint(x: 6, y: 30))
        bezier10Path.line(to: NSPoint(x: 8, y: 18))
        bezier10Path.close()
        bezier10Path.windingRule = .evenOdd
        fillColor.setFill()
        bezier10Path.fill()
        strokeColor.setStroke()
        bezier10Path.lineWidth = 1.5
        bezier10Path.miterLimit = 4
        bezier10Path.lineJoinStyle = .round
        bezier10Path.stroke()


        //// Bezier 11 Drawing
        let bezier11Path = NSBezierPath()
        bezier11Path.move(to: NSPoint(x: 8, y: 18))
        bezier11Path.curve(to: NSPoint(x: 10.5, y: 14), controlPoint1: NSPoint(x: 8, y: 16), controlPoint2: NSPoint(x: 9.5, y: 16))
        bezier11Path.curve(to: NSPoint(x: 11, y: 10.5), controlPoint1: NSPoint(x: 11.5, y: 12.5), controlPoint2: NSPoint(x: 11.5, y: 13))
        bezier11Path.curve(to: NSPoint(x: 9.5, y: 8), controlPoint1: NSPoint(x: 9.5, y: 9.5), controlPoint2: NSPoint(x: 9.5, y: 8))
        bezier11Path.curve(to: NSPoint(x: 10, y: 5.5), controlPoint1: NSPoint(x: 8, y: 6.5), controlPoint2: NSPoint(x: 10, y: 5.5))
        bezier11Path.curve(to: NSPoint(x: 33, y: 5.5), controlPoint1: NSPoint(x: 16.5, y: 4.5), controlPoint2: NSPoint(x: 26.5, y: 4.5))
        bezier11Path.curve(to: NSPoint(x: 33, y: 8), controlPoint1: NSPoint(x: 33, y: 5.5), controlPoint2: NSPoint(x: 34.5, y: 6.5))
        bezier11Path.curve(to: NSPoint(x: 32, y: 10.5), controlPoint1: NSPoint(x: 33, y: 8), controlPoint2: NSPoint(x: 33.5, y: 9.5))
        bezier11Path.curve(to: NSPoint(x: 32.5, y: 14), controlPoint1: NSPoint(x: 31.5, y: 13), controlPoint2: NSPoint(x: 31.5, y: 12.5))
        bezier11Path.curve(to: NSPoint(x: 35, y: 18), controlPoint1: NSPoint(x: 33.5, y: 16), controlPoint2: NSPoint(x: 35, y: 16))
        bezier11Path.curve(to: NSPoint(x: 8, y: 18), controlPoint1: NSPoint(x: 26.5, y: 19.5), controlPoint2: NSPoint(x: 16.5, y: 19.5))
        bezier11Path.close()
        bezier11Path.windingRule = .evenOdd
        fillColor.setFill()
        bezier11Path.fill()
        strokeColor.setStroke()
        bezier11Path.lineWidth = 1.5
        bezier11Path.miterLimit = 4
        bezier11Path.lineJoinStyle = .round
        bezier11Path.stroke()


        //// Bezier 12 Drawing
        let bezier12Path = NSBezierPath()
        bezier12Path.move(to: NSPoint(x: 10.5, y: 14))
        bezier12Path.curve(to: NSPoint(x: 32.5, y: 14), controlPoint1: NSPoint(x: 14, y: 15), controlPoint2: NSPoint(x: 29, y: 15))
        strokeColor.setStroke()
        bezier12Path.lineWidth = 1.5
        bezier12Path.miterLimit = 4
        bezier12Path.lineCapStyle = .round
        bezier12Path.lineJoinStyle = .round
        bezier12Path.stroke()


        //// Bezier 13 Drawing
        let bezier13Path = NSBezierPath()
        bezier13Path.move(to: NSPoint(x: 11, y: 10.5))
        bezier13Path.curve(to: NSPoint(x: 32, y: 10.5), controlPoint1: NSPoint(x: 17, y: 11.5), controlPoint2: NSPoint(x: 26, y: 11.5))
        strokeColor.setStroke()
        bezier13Path.lineWidth = 1.5
        bezier13Path.miterLimit = 4
        bezier13Path.lineCapStyle = .round
        bezier13Path.lineJoinStyle = .round
        bezier13Path.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawQueen_black(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Color Declarations
        let strokeColor = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let fillColor2 = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let strokeColor2 = NSColor(red: 1, green: 1, blue: 1, alpha: 1)

        //// Group 2
        //// Oval Drawing
        let ovalPath = NSBezierPath(ovalIn: NSRect(x: 2.4, y: 29.75, width: 5.5, height: 5.5))
        fillColor2.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = NSBezierPath(ovalIn: NSRect(x: 10.4, y: 32.75, width: 5.5, height: 5.5))
        fillColor2.setFill()
        oval2Path.fill()


        //// Oval 3 Drawing
        let oval3Path = NSBezierPath(ovalIn: NSRect(x: 18.9, y: 33.75, width: 5.5, height: 5.5))
        fillColor2.setFill()
        oval3Path.fill()


        //// Oval 4 Drawing
        let oval4Path = NSBezierPath(ovalIn: NSRect(x: 27.4, y: 32.75, width: 5.5, height: 5.5))
        fillColor2.setFill()
        oval4Path.fill()


        //// Oval 5 Drawing
        let oval5Path = NSBezierPath(ovalIn: NSRect(x: 35.4, y: 29.75, width: 5.5, height: 5.5))
        fillColor2.setFill()
        oval5Path.fill()


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 8.17, y: 18.5))
        bezierPath.curve(to: NSPoint(x: 35.17, y: 18.5), controlPoint1: NSPoint(x: 16.67, y: 20), controlPoint2: NSPoint(x: 29.17, y: 20))
        bezierPath.line(to: NSPoint(x: 37.67, y: 31))
        bezierPath.line(to: NSPoint(x: 30.17, y: 19.5))
        bezierPath.line(to: NSPoint(x: 29.87, y: 33.6))
        bezierPath.line(to: NSPoint(x: 24.67, y: 20))
        bezierPath.line(to: NSPoint(x: 21.67, y: 34.5))
        bezierPath.line(to: NSPoint(x: 18.67, y: 20))
        bezierPath.line(to: NSPoint(x: 13.47, y: 33.6))
        bezierPath.line(to: NSPoint(x: 13.17, y: 19.5))
        bezierPath.line(to: NSPoint(x: 5.67, y: 31))
        bezierPath.line(to: NSPoint(x: 8.17, y: 18.5))
        bezierPath.close()
        bezierPath.windingRule = .evenOdd
        fillColor2.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = NSBezierPath()
        bezier2Path.move(to: NSPoint(x: 8.17, y: 18.5))
        bezier2Path.curve(to: NSPoint(x: 35.17, y: 18.5), controlPoint1: NSPoint(x: 16.67, y: 20), controlPoint2: NSPoint(x: 29.17, y: 20))
        bezier2Path.line(to: NSPoint(x: 37.67, y: 31))
        bezier2Path.line(to: NSPoint(x: 30.17, y: 19.5))
        bezier2Path.line(to: NSPoint(x: 29.87, y: 33.6))
        bezier2Path.line(to: NSPoint(x: 24.67, y: 20))
        bezier2Path.line(to: NSPoint(x: 21.67, y: 34.5))
        bezier2Path.line(to: NSPoint(x: 18.67, y: 20))
        bezier2Path.line(to: NSPoint(x: 13.47, y: 33.6))
        bezier2Path.line(to: NSPoint(x: 13.17, y: 19.5))
        bezier2Path.line(to: NSPoint(x: 5.67, y: 31))
        bezier2Path.line(to: NSPoint(x: 8.17, y: 18.5))
        bezier2Path.close()
        strokeColor.setStroke()
        bezier2Path.lineWidth = 1.5
        bezier2Path.miterLimit = 1.5
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = NSBezierPath()
        bezier3Path.move(to: NSPoint(x: 8.17, y: 18.5))
        bezier3Path.curve(to: NSPoint(x: 10.67, y: 14.5), controlPoint1: NSPoint(x: 8.17, y: 16.5), controlPoint2: NSPoint(x: 9.67, y: 16.5))
        bezier3Path.curve(to: NSPoint(x: 11.17, y: 11), controlPoint1: NSPoint(x: 11.67, y: 13), controlPoint2: NSPoint(x: 11.67, y: 13.5))
        bezier3Path.curve(to: NSPoint(x: 9.67, y: 8.5), controlPoint1: NSPoint(x: 9.67, y: 10), controlPoint2: NSPoint(x: 9.67, y: 8.5))
        bezier3Path.curve(to: NSPoint(x: 10.17, y: 6), controlPoint1: NSPoint(x: 8.17, y: 7), controlPoint2: NSPoint(x: 10.17, y: 6))
        bezier3Path.curve(to: NSPoint(x: 33.17, y: 6), controlPoint1: NSPoint(x: 16.67, y: 5), controlPoint2: NSPoint(x: 26.67, y: 5))
        bezier3Path.curve(to: NSPoint(x: 33.17, y: 8.5), controlPoint1: NSPoint(x: 33.17, y: 6), controlPoint2: NSPoint(x: 34.67, y: 7))
        bezier3Path.curve(to: NSPoint(x: 32.17, y: 11), controlPoint1: NSPoint(x: 33.17, y: 8.5), controlPoint2: NSPoint(x: 33.67, y: 10))
        bezier3Path.curve(to: NSPoint(x: 32.67, y: 14.5), controlPoint1: NSPoint(x: 31.67, y: 13.5), controlPoint2: NSPoint(x: 31.67, y: 13))
        bezier3Path.curve(to: NSPoint(x: 35.17, y: 18.5), controlPoint1: NSPoint(x: 33.67, y: 16.5), controlPoint2: NSPoint(x: 35.17, y: 16.5))
        bezier3Path.curve(to: NSPoint(x: 8.17, y: 18.5), controlPoint1: NSPoint(x: 26.67, y: 20), controlPoint2: NSPoint(x: 16.67, y: 20))
        bezier3Path.close()
        bezier3Path.windingRule = .evenOdd
        fillColor2.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = NSBezierPath()
        bezier4Path.move(to: NSPoint(x: 8.17, y: 18.5))
        bezier4Path.curve(to: NSPoint(x: 10.67, y: 14.5), controlPoint1: NSPoint(x: 8.17, y: 16.5), controlPoint2: NSPoint(x: 9.67, y: 16.5))
        bezier4Path.curve(to: NSPoint(x: 11.17, y: 11), controlPoint1: NSPoint(x: 11.67, y: 13), controlPoint2: NSPoint(x: 11.67, y: 13.5))
        bezier4Path.curve(to: NSPoint(x: 9.67, y: 8.5), controlPoint1: NSPoint(x: 9.67, y: 10), controlPoint2: NSPoint(x: 9.67, y: 8.5))
        bezier4Path.curve(to: NSPoint(x: 10.17, y: 6), controlPoint1: NSPoint(x: 8.17, y: 7), controlPoint2: NSPoint(x: 10.17, y: 6))
        bezier4Path.curve(to: NSPoint(x: 33.17, y: 6), controlPoint1: NSPoint(x: 16.67, y: 5), controlPoint2: NSPoint(x: 26.67, y: 5))
        bezier4Path.curve(to: NSPoint(x: 33.17, y: 8.5), controlPoint1: NSPoint(x: 33.17, y: 6), controlPoint2: NSPoint(x: 34.67, y: 7))
        bezier4Path.curve(to: NSPoint(x: 32.17, y: 11), controlPoint1: NSPoint(x: 33.17, y: 8.5), controlPoint2: NSPoint(x: 33.67, y: 10))
        bezier4Path.curve(to: NSPoint(x: 32.67, y: 14.5), controlPoint1: NSPoint(x: 31.67, y: 13.5), controlPoint2: NSPoint(x: 31.67, y: 13))
        bezier4Path.curve(to: NSPoint(x: 35.17, y: 18.5), controlPoint1: NSPoint(x: 33.67, y: 16.5), controlPoint2: NSPoint(x: 35.17, y: 16.5))
        bezier4Path.curve(to: NSPoint(x: 8.17, y: 18.5), controlPoint1: NSPoint(x: 26.67, y: 20), controlPoint2: NSPoint(x: 16.67, y: 20))
        bezier4Path.close()
        strokeColor.setStroke()
        bezier4Path.lineWidth = 1.5
        bezier4Path.miterLimit = 1.5
        bezier4Path.lineJoinStyle = .round
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = NSBezierPath()
        bezier5Path.move(to: NSPoint(x: 10.17, y: 6))
        bezier5Path.curve(to: NSPoint(x: 33.17, y: 6), controlPoint1: NSPoint(x: 17.62, y: 3.41), controlPoint2: NSPoint(x: 25.73, y: 3.41))
        strokeColor.setStroke()
        bezier5Path.lineWidth = 1.5
        bezier5Path.miterLimit = 1.5
        bezier5Path.lineJoinStyle = .round
        bezier5Path.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = NSBezierPath()
        bezier6Path.move(to: NSPoint(x: 10.17, y: 15.5))
        bezier6Path.curve(to: NSPoint(x: 33.17, y: 15.5), controlPoint1: NSPoint(x: 17.62, y: 18.09), controlPoint2: NSPoint(x: 25.73, y: 18.09))
        strokeColor2.setStroke()
        bezier6Path.lineWidth = 1.5
        bezier6Path.miterLimit = 1.5
        bezier6Path.lineCapStyle = .round
        bezier6Path.lineJoinStyle = .round
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = NSBezierPath()
        bezier7Path.move(to: NSPoint(x: 11.67, y: 13))
        bezier7Path.line(to: NSPoint(x: 31.67, y: 13))
        strokeColor2.setStroke()
        bezier7Path.lineWidth = 1.5
        bezier7Path.miterLimit = 1.5
        bezier7Path.lineCapStyle = .round
        bezier7Path.lineJoinStyle = .round
        bezier7Path.stroke()


        //// Bezier 8 Drawing
        let bezier8Path = NSBezierPath()
        bezier8Path.move(to: NSPoint(x: 10.67, y: 10))
        bezier8Path.curve(to: NSPoint(x: 32.67, y: 10), controlPoint1: NSPoint(x: 17.82, y: 7.64), controlPoint2: NSPoint(x: 25.53, y: 7.64))
        strokeColor2.setStroke()
        bezier8Path.lineWidth = 1.5
        bezier8Path.miterLimit = 1.5
        bezier8Path.lineCapStyle = .round
        bezier8Path.lineJoinStyle = .round
        bezier8Path.stroke()


        //// Bezier 9 Drawing
        let bezier9Path = NSBezierPath()
        bezier9Path.move(to: NSPoint(x: 9.67, y: 7))
        bezier9Path.curve(to: NSPoint(x: 33.67, y: 7), controlPoint1: NSPoint(x: 17.42, y: 4.17), controlPoint2: NSPoint(x: 25.92, y: 4.17))
        strokeColor2.setStroke()
        bezier9Path.lineWidth = 1.5
        bezier9Path.miterLimit = 1.5
        bezier9Path.lineCapStyle = .round
        bezier9Path.lineJoinStyle = .round
        bezier9Path.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawBishop_white(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Color Declarations
        let strokeColor = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let fillColor = NSColor(red: 1, green: 1, blue: 1, alpha: 1)

        //// Group 4
        //// Group 5
        //// Bezier 14 Drawing
        let bezier14Path = NSBezierPath()
        bezier14Path.move(to: NSPoint(x: 8, y: 8))
        bezier14Path.curve(to: NSPoint(x: 21.5, y: 10), controlPoint1: NSPoint(x: 11.39, y: 8.97), controlPoint2: NSPoint(x: 18.11, y: 7.57))
        bezier14Path.curve(to: NSPoint(x: 35, y: 8), controlPoint1: NSPoint(x: 24.89, y: 7.57), controlPoint2: NSPoint(x: 31.61, y: 8.97))
        bezier14Path.curve(to: NSPoint(x: 38, y: 6), controlPoint1: NSPoint(x: 35, y: 8), controlPoint2: NSPoint(x: 36.65, y: 7.46))
        bezier14Path.curve(to: NSPoint(x: 35, y: 5.5), controlPoint1: NSPoint(x: 37.32, y: 5.03), controlPoint2: NSPoint(x: 36.35, y: 5.01))
        bezier14Path.curve(to: NSPoint(x: 21.5, y: 6.5), controlPoint1: NSPoint(x: 31.61, y: 6.47), controlPoint2: NSPoint(x: 24.89, y: 5.04))
        bezier14Path.curve(to: NSPoint(x: 8, y: 5.5), controlPoint1: NSPoint(x: 18.11, y: 5.04), controlPoint2: NSPoint(x: 11.39, y: 6.47))
        bezier14Path.curve(to: NSPoint(x: 5, y: 6), controlPoint1: NSPoint(x: 6.65, y: 5.01), controlPoint2: NSPoint(x: 5.68, y: 5.03))
        bezier14Path.curve(to: NSPoint(x: 8, y: 8), controlPoint1: NSPoint(x: 6.35, y: 7.94), controlPoint2: NSPoint(x: 8, y: 8))
        bezier14Path.close()
        bezier14Path.windingRule = .evenOdd
        fillColor.setFill()
        bezier14Path.fill()
        strokeColor.setStroke()
        bezier14Path.lineWidth = 1.5
        bezier14Path.miterLimit = 4
        bezier14Path.lineJoinStyle = .round
        bezier14Path.stroke()


        //// Bezier 15 Drawing
        let bezier15Path = NSBezierPath()
        bezier15Path.move(to: NSPoint(x: 14, y: 12))
        bezier15Path.curve(to: NSPoint(x: 29, y: 12), controlPoint1: NSPoint(x: 16.5, y: 9.5), controlPoint2: NSPoint(x: 26.5, y: 9.5))
        bezier15Path.curve(to: NSPoint(x: 29, y: 14), controlPoint1: NSPoint(x: 29.5, y: 13.5), controlPoint2: NSPoint(x: 29, y: 14))
        bezier15Path.curve(to: NSPoint(x: 26.5, y: 18), controlPoint1: NSPoint(x: 29, y: 16.5), controlPoint2: NSPoint(x: 26.5, y: 18))
        bezier15Path.curve(to: NSPoint(x: 21.5, y: 33.5), controlPoint1: NSPoint(x: 32, y: 19.5), controlPoint2: NSPoint(x: 32.5, y: 29.5))
        bezier15Path.curve(to: NSPoint(x: 16.5, y: 18), controlPoint1: NSPoint(x: 10.5, y: 29.5), controlPoint2: NSPoint(x: 11, y: 19.5))
        bezier15Path.curve(to: NSPoint(x: 14, y: 14), controlPoint1: NSPoint(x: 16.5, y: 18), controlPoint2: NSPoint(x: 14, y: 16.5))
        bezier15Path.curve(to: NSPoint(x: 14, y: 12), controlPoint1: NSPoint(x: 14, y: 14), controlPoint2: NSPoint(x: 13.5, y: 13.5))
        bezier15Path.close()
        bezier15Path.windingRule = .evenOdd
        fillColor.setFill()
        bezier15Path.fill()
        strokeColor.setStroke()
        bezier15Path.lineWidth = 1.5
        bezier15Path.miterLimit = 4
        bezier15Path.lineJoinStyle = .round
        bezier15Path.stroke()


        //// Oval 4 Drawing
        let oval4Path = NSBezierPath(ovalIn: NSRect(x: 19, y: 33.5, width: 5, height: 5))
        fillColor.setFill()
        oval4Path.fill()
        strokeColor.setStroke()
        oval4Path.lineWidth = 1.5
        oval4Path.stroke()




        //// Bezier 16 Drawing
        let bezier16Path = NSBezierPath()
        bezier16Path.move(to: NSPoint(x: 16.5, y: 18))
        bezier16Path.line(to: NSPoint(x: 26.5, y: 18))
        bezier16Path.move(to: NSPoint(x: 14, y: 14))
        bezier16Path.line(to: NSPoint(x: 29, y: 14))
        bezier16Path.move(to: NSPoint(x: 21.5, y: 28.5))
        bezier16Path.line(to: NSPoint(x: 21.5, y: 23.5))
        bezier16Path.move(to: NSPoint(x: 19, y: 26))
        bezier16Path.line(to: NSPoint(x: 24, y: 26))
        strokeColor.setStroke()
        bezier16Path.lineWidth = 1.5
        bezier16Path.miterLimit = 4
        bezier16Path.lineCapStyle = .round
        bezier16Path.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawBishop_black(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Color Declarations
        let strokeColor = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let fillColor2 = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let strokeColor2 = NSColor(red: 1, green: 1, blue: 1, alpha: 1)

        //// Group 12
        //// Group 13
        //// Bezier 38 Drawing
        let bezier38Path = NSBezierPath()
        bezier38Path.move(to: NSPoint(x: 8, y: 8))
        bezier38Path.curve(to: NSPoint(x: 21.5, y: 10), controlPoint1: NSPoint(x: 11.39, y: 8.97), controlPoint2: NSPoint(x: 18.11, y: 7.57))
        bezier38Path.curve(to: NSPoint(x: 35, y: 8), controlPoint1: NSPoint(x: 24.89, y: 7.57), controlPoint2: NSPoint(x: 31.61, y: 8.97))
        bezier38Path.curve(to: NSPoint(x: 38, y: 6), controlPoint1: NSPoint(x: 35, y: 8), controlPoint2: NSPoint(x: 36.65, y: 7.46))
        bezier38Path.curve(to: NSPoint(x: 35, y: 5.5), controlPoint1: NSPoint(x: 37.32, y: 5.03), controlPoint2: NSPoint(x: 36.35, y: 5.01))
        bezier38Path.curve(to: NSPoint(x: 21.5, y: 6.5), controlPoint1: NSPoint(x: 31.61, y: 6.47), controlPoint2: NSPoint(x: 24.89, y: 5.04))
        bezier38Path.curve(to: NSPoint(x: 8, y: 5.5), controlPoint1: NSPoint(x: 18.11, y: 5.04), controlPoint2: NSPoint(x: 11.39, y: 6.47))
        bezier38Path.curve(to: NSPoint(x: 5, y: 6), controlPoint1: NSPoint(x: 6.65, y: 5.01), controlPoint2: NSPoint(x: 5.68, y: 5.03))
        bezier38Path.curve(to: NSPoint(x: 8, y: 8), controlPoint1: NSPoint(x: 6.35, y: 7.94), controlPoint2: NSPoint(x: 8, y: 8))
        bezier38Path.close()
        bezier38Path.windingRule = .evenOdd
        fillColor2.setFill()
        bezier38Path.fill()
        strokeColor.setStroke()
        bezier38Path.lineWidth = 1.5
        bezier38Path.miterLimit = 4
        bezier38Path.lineJoinStyle = .round
        bezier38Path.stroke()


        //// Bezier 39 Drawing
        let bezier39Path = NSBezierPath()
        bezier39Path.move(to: NSPoint(x: 14, y: 12))
        bezier39Path.curve(to: NSPoint(x: 29, y: 12), controlPoint1: NSPoint(x: 16.5, y: 9.5), controlPoint2: NSPoint(x: 26.5, y: 9.5))
        bezier39Path.curve(to: NSPoint(x: 29, y: 14), controlPoint1: NSPoint(x: 29.5, y: 13.5), controlPoint2: NSPoint(x: 29, y: 14))
        bezier39Path.curve(to: NSPoint(x: 26.5, y: 18), controlPoint1: NSPoint(x: 29, y: 16.5), controlPoint2: NSPoint(x: 26.5, y: 18))
        bezier39Path.curve(to: NSPoint(x: 21.5, y: 33.5), controlPoint1: NSPoint(x: 32, y: 19.5), controlPoint2: NSPoint(x: 32.5, y: 29.5))
        bezier39Path.curve(to: NSPoint(x: 16.5, y: 18), controlPoint1: NSPoint(x: 10.5, y: 29.5), controlPoint2: NSPoint(x: 11, y: 19.5))
        bezier39Path.curve(to: NSPoint(x: 14, y: 14), controlPoint1: NSPoint(x: 16.5, y: 18), controlPoint2: NSPoint(x: 14, y: 16.5))
        bezier39Path.curve(to: NSPoint(x: 14, y: 12), controlPoint1: NSPoint(x: 14, y: 14), controlPoint2: NSPoint(x: 13.5, y: 13.5))
        bezier39Path.close()
        bezier39Path.windingRule = .evenOdd
        fillColor2.setFill()
        bezier39Path.fill()
        strokeColor.setStroke()
        bezier39Path.lineWidth = 1.5
        bezier39Path.miterLimit = 4
        bezier39Path.lineJoinStyle = .round
        bezier39Path.stroke()


        //// Oval 12 Drawing
        let oval12Path = NSBezierPath(ovalIn: NSRect(x: 19, y: 33.5, width: 5, height: 5))
        fillColor2.setFill()
        oval12Path.fill()
        strokeColor.setStroke()
        oval12Path.lineWidth = 1.5
        oval12Path.stroke()




        //// Bezier 40 Drawing
        let bezier40Path = NSBezierPath()
        bezier40Path.move(to: NSPoint(x: 16.5, y: 18))
        bezier40Path.line(to: NSPoint(x: 26.5, y: 18))
        bezier40Path.move(to: NSPoint(x: 14, y: 14))
        bezier40Path.line(to: NSPoint(x: 29, y: 14))
        bezier40Path.move(to: NSPoint(x: 21.5, y: 28.5))
        bezier40Path.line(to: NSPoint(x: 21.5, y: 23.5))
        bezier40Path.move(to: NSPoint(x: 19, y: 26))
        bezier40Path.line(to: NSPoint(x: 24, y: 26))
        strokeColor2.setStroke()
        bezier40Path.lineWidth = 1.5
        bezier40Path.miterLimit = 4
        bezier40Path.lineCapStyle = .round
        bezier40Path.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawKnight_white(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Color Declarations
        let strokeColor = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let fillColor = NSColor(red: 1, green: 1, blue: 1, alpha: 1)
        let fillColor2 = NSColor(red: 0, green: 0, blue: 0, alpha: 1)

        //// Group 6
        //// Bezier 17 Drawing
        let bezier17Path = NSBezierPath()
        bezier17Path.move(to: NSPoint(x: 21, y: 35))
        bezier17Path.curve(to: NSPoint(x: 37, y: 6), controlPoint1: NSPoint(x: 31.5, y: 34), controlPoint2: NSPoint(x: 37.5, y: 27))
        bezier17Path.line(to: NSPoint(x: 14, y: 6))
        bezier17Path.curve(to: NSPoint(x: 22, y: 27), controlPoint1: NSPoint(x: 14, y: 15), controlPoint2: NSPoint(x: 24, y: 12.5))
        bezier17Path.windingRule = .evenOdd
        fillColor.setFill()
        bezier17Path.fill()
        strokeColor.setStroke()
        bezier17Path.lineWidth = 1.5
        bezier17Path.miterLimit = 4
        bezier17Path.lineCapStyle = .round
        bezier17Path.lineJoinStyle = .round
        bezier17Path.stroke()


        //// Bezier 18 Drawing
        let bezier18Path = NSBezierPath()
        bezier18Path.move(to: NSPoint(x: 23, y: 27))
        bezier18Path.curve(to: NSPoint(x: 15, y: 18), controlPoint1: NSPoint(x: 23.38, y: 24.09), controlPoint2: NSPoint(x: 17.45, y: 19.63))
        bezier18Path.curve(to: NSPoint(x: 10, y: 14), controlPoint1: NSPoint(x: 12, y: 16), controlPoint2: NSPoint(x: 12.18, y: 13.66))
        bezier18Path.curve(to: NSPoint(x: 10, y: 17), controlPoint1: NSPoint(x: 8.96, y: 14.94), controlPoint2: NSPoint(x: 11.41, y: 17.04))
        bezier18Path.curve(to: NSPoint(x: 9, y: 15), controlPoint1: NSPoint(x: 9, y: 17), controlPoint2: NSPoint(x: 10.19, y: 15.77))
        bezier18Path.curve(to: NSPoint(x: 5, y: 19), controlPoint1: NSPoint(x: 8, y: 15), controlPoint2: NSPoint(x: 5, y: 14))
        bezier18Path.curve(to: NSPoint(x: 11, y: 31), controlPoint1: NSPoint(x: 5, y: 21), controlPoint2: NSPoint(x: 11, y: 31))
        bezier18Path.curve(to: NSPoint(x: 13, y: 34.5), controlPoint1: NSPoint(x: 11, y: 31), controlPoint2: NSPoint(x: 12.89, y: 32.9))
        bezier18Path.curve(to: NSPoint(x: 12.5, y: 37.5), controlPoint1: NSPoint(x: 12.27, y: 35.49), controlPoint2: NSPoint(x: 12.5, y: 36.5))
        bezier18Path.curve(to: NSPoint(x: 15.5, y: 35), controlPoint1: NSPoint(x: 13.5, y: 38.5), controlPoint2: NSPoint(x: 15.5, y: 35))
        bezier18Path.line(to: NSPoint(x: 17.5, y: 35))
        bezier18Path.curve(to: NSPoint(x: 20, y: 38), controlPoint1: NSPoint(x: 17.5, y: 35), controlPoint2: NSPoint(x: 18.28, y: 36.99))
        bezier18Path.curve(to: NSPoint(x: 21, y: 35), controlPoint1: NSPoint(x: 21, y: 38), controlPoint2: NSPoint(x: 21, y: 35))
        bezier18Path.windingRule = .evenOdd
        fillColor.setFill()
        bezier18Path.fill()
        strokeColor.setStroke()
        bezier18Path.lineWidth = 1.5
        bezier18Path.miterLimit = 4
        bezier18Path.lineCapStyle = .round
        bezier18Path.lineJoinStyle = .round
        bezier18Path.stroke()


        //// Oval 5 Drawing
        let oval5Path = NSBezierPath(ovalIn: NSRect(x: 7.5, y: 19, width: 1, height: 1))
        fillColor2.setFill()
        oval5Path.fill()
        strokeColor.setStroke()
        oval5Path.lineWidth = 1.5
        oval5Path.stroke()


        //// Oval 6 Drawing
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 13.5, y: 29.15)
        context.rotate(by: -30 * CGFloat.pi/180)

        let oval6Path = NSBezierPath(ovalIn: NSRect(x: -0.5, y: -1.5, width: 1, height: 3))
        fillColor2.setFill()
        oval6Path.fill()
        strokeColor.setStroke()
        oval6Path.lineWidth = 1.5
        oval6Path.stroke()

        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawKnight_black(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Color Declarations
        let strokeColor = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let fillColor = NSColor(red: 1, green: 1, blue: 1, alpha: 1)
        let fillColor2 = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let strokeColor2 = NSColor(red: 1, green: 1, blue: 1, alpha: 1)

        //// Group 14
        //// Bezier 41 Drawing
        let bezier41Path = NSBezierPath()
        bezier41Path.move(to: NSPoint(x: 21, y: 35))
        bezier41Path.curve(to: NSPoint(x: 37, y: 6), controlPoint1: NSPoint(x: 31.5, y: 34), controlPoint2: NSPoint(x: 37.5, y: 27))
        bezier41Path.line(to: NSPoint(x: 14, y: 6))
        bezier41Path.curve(to: NSPoint(x: 22, y: 27), controlPoint1: NSPoint(x: 14, y: 15), controlPoint2: NSPoint(x: 24, y: 12.5))
        bezier41Path.windingRule = .evenOdd
        fillColor2.setFill()
        bezier41Path.fill()
        strokeColor.setStroke()
        bezier41Path.lineWidth = 1.5
        bezier41Path.miterLimit = 4
        bezier41Path.lineCapStyle = .round
        bezier41Path.lineJoinStyle = .round
        bezier41Path.stroke()


        //// Bezier 42 Drawing
        let bezier42Path = NSBezierPath()
        bezier42Path.move(to: NSPoint(x: 23, y: 27))
        bezier42Path.curve(to: NSPoint(x: 15, y: 18), controlPoint1: NSPoint(x: 23.38, y: 24.09), controlPoint2: NSPoint(x: 17.45, y: 19.63))
        bezier42Path.curve(to: NSPoint(x: 10, y: 14), controlPoint1: NSPoint(x: 12, y: 16), controlPoint2: NSPoint(x: 12.18, y: 13.66))
        bezier42Path.curve(to: NSPoint(x: 10, y: 17), controlPoint1: NSPoint(x: 8.96, y: 14.94), controlPoint2: NSPoint(x: 11.41, y: 17.04))
        bezier42Path.curve(to: NSPoint(x: 9, y: 15), controlPoint1: NSPoint(x: 9, y: 17), controlPoint2: NSPoint(x: 10.19, y: 15.77))
        bezier42Path.curve(to: NSPoint(x: 5, y: 19), controlPoint1: NSPoint(x: 8, y: 15), controlPoint2: NSPoint(x: 5, y: 14))
        bezier42Path.curve(to: NSPoint(x: 11, y: 31), controlPoint1: NSPoint(x: 5, y: 21), controlPoint2: NSPoint(x: 11, y: 31))
        bezier42Path.curve(to: NSPoint(x: 13, y: 34.5), controlPoint1: NSPoint(x: 11, y: 31), controlPoint2: NSPoint(x: 12.89, y: 32.9))
        bezier42Path.curve(to: NSPoint(x: 12.5, y: 37.5), controlPoint1: NSPoint(x: 12.27, y: 35.49), controlPoint2: NSPoint(x: 12.5, y: 36.5))
        bezier42Path.curve(to: NSPoint(x: 15.5, y: 35), controlPoint1: NSPoint(x: 13.5, y: 38.5), controlPoint2: NSPoint(x: 15.5, y: 35))
        bezier42Path.line(to: NSPoint(x: 17.5, y: 35))
        bezier42Path.curve(to: NSPoint(x: 20, y: 38), controlPoint1: NSPoint(x: 17.5, y: 35), controlPoint2: NSPoint(x: 18.28, y: 36.99))
        bezier42Path.curve(to: NSPoint(x: 21, y: 35), controlPoint1: NSPoint(x: 21, y: 38), controlPoint2: NSPoint(x: 21, y: 35))
        bezier42Path.windingRule = .evenOdd
        fillColor2.setFill()
        bezier42Path.fill()
        strokeColor.setStroke()
        bezier42Path.lineWidth = 1.5
        bezier42Path.miterLimit = 4
        bezier42Path.lineCapStyle = .round
        bezier42Path.lineJoinStyle = .round
        bezier42Path.stroke()


        //// Oval 13 Drawing
        let oval13Path = NSBezierPath(ovalIn: NSRect(x: 7.5, y: 19, width: 1, height: 1))
        fillColor.setFill()
        oval13Path.fill()
        strokeColor2.setStroke()
        oval13Path.lineWidth = 1.5
        oval13Path.stroke()


        //// Oval 14 Drawing
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 13.5, y: 29.15)
        context.rotate(by: -30 * CGFloat.pi/180)

        let oval14Path = NSBezierPath(ovalIn: NSRect(x: -0.5, y: -1.5, width: 1, height: 3))
        fillColor.setFill()
        oval14Path.fill()
        strokeColor2.setStroke()
        oval14Path.lineWidth = 1.5
        oval14Path.stroke()

        NSGraphicsContext.restoreGraphicsState()


        //// Bezier 43 Drawing
        let bezier43Path = NSBezierPath()
        bezier43Path.move(to: NSPoint(x: 23.55, y: 34.6))
        bezier43Path.line(to: NSPoint(x: 23.1, y: 33.15))
        bezier43Path.line(to: NSPoint(x: 23.6, y: 33))
        bezier43Path.curve(to: NSPoint(x: 31.5, y: 26.25), controlPoint1: NSPoint(x: 26.75, y: 32), controlPoint2: NSPoint(x: 29.25, y: 30.51))
        bezier43Path.curve(to: NSPoint(x: 34.25, y: 6), controlPoint1: NSPoint(x: 33.75, y: 21.99), controlPoint2: NSPoint(x: 34.75, y: 15.94))
        bezier43Path.line(to: NSPoint(x: 34.2, y: 5.5))
        bezier43Path.line(to: NSPoint(x: 36.45, y: 5.5))
        bezier43Path.line(to: NSPoint(x: 36.5, y: 6))
        bezier43Path.curve(to: NSPoint(x: 33.25, y: 27.34), controlPoint1: NSPoint(x: 37, y: 16.06), controlPoint2: NSPoint(x: 35.62, y: 22.85))
        bezier43Path.curve(to: NSPoint(x: 24.06, y: 34.5), controlPoint1: NSPoint(x: 30.88, y: 31.83), controlPoint2: NSPoint(x: 27.46, y: 33.98))
        bezier43Path.line(to: NSPoint(x: 23.55, y: 34.6))
        bezier43Path.close()
        bezier43Path.windingRule = .evenOdd
        fillColor.setFill()
        bezier43Path.fill()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawRook_white(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Color Declarations
        let strokeColor = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let fillColor = NSColor(red: 1, green: 1, blue: 1, alpha: 1)

        //// Group 7
        //// Rectangle Drawing
        let rectanglePath = NSBezierPath(rect: NSRect(x: 8, y: 7, width: 27, height: 3))
        fillColor.setFill()
        rectanglePath.fill()
        strokeColor.setStroke()
        rectanglePath.lineWidth = 1.5
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = NSBezierPath(rect: NSRect(x: 11, y: 10, width: 21, height: 4))
        fillColor.setFill()
        rectangle2Path.fill()
        strokeColor.setStroke()
        rectangle2Path.lineWidth = 1.5
        rectangle2Path.stroke()


        //// Bezier 19 Drawing
        let bezier19Path = NSBezierPath()
        bezier19Path.move(to: NSPoint(x: 10, y: 32))
        bezier19Path.line(to: NSPoint(x: 10, y: 37))
        bezier19Path.line(to: NSPoint(x: 14, y: 37))
        bezier19Path.line(to: NSPoint(x: 14, y: 35))
        bezier19Path.line(to: NSPoint(x: 19, y: 35))
        bezier19Path.line(to: NSPoint(x: 19, y: 37))
        bezier19Path.line(to: NSPoint(x: 24, y: 37))
        bezier19Path.line(to: NSPoint(x: 24, y: 35))
        bezier19Path.line(to: NSPoint(x: 29, y: 35))
        bezier19Path.line(to: NSPoint(x: 29, y: 37))
        bezier19Path.line(to: NSPoint(x: 33, y: 37))
        bezier19Path.line(to: NSPoint(x: 33, y: 32))
        bezier19Path.windingRule = .evenOdd
        fillColor.setFill()
        bezier19Path.fill()
        strokeColor.setStroke()
        bezier19Path.lineWidth = 1.5
        bezier19Path.miterLimit = 4
        bezier19Path.lineJoinStyle = .round
        bezier19Path.stroke()


        //// Bezier 20 Drawing
        let bezier20Path = NSBezierPath()
        bezier20Path.move(to: NSPoint(x: 33, y: 32))
        bezier20Path.line(to: NSPoint(x: 30, y: 29))
        bezier20Path.line(to: NSPoint(x: 13, y: 29))
        bezier20Path.line(to: NSPoint(x: 10, y: 32))
        bezier20Path.windingRule = .evenOdd
        fillColor.setFill()
        bezier20Path.fill()
        strokeColor.setStroke()
        bezier20Path.lineWidth = 1.5
        bezier20Path.miterLimit = 4
        bezier20Path.lineCapStyle = .round
        bezier20Path.lineJoinStyle = .round
        bezier20Path.stroke()


        //// Bezier 21 Drawing
        let bezier21Path = NSBezierPath()
        bezier21Path.move(to: NSPoint(x: 30, y: 29))
        bezier21Path.line(to: NSPoint(x: 30, y: 16.5))
        bezier21Path.line(to: NSPoint(x: 13, y: 16.5))
        bezier21Path.line(to: NSPoint(x: 13, y: 29))
        bezier21Path.windingRule = .evenOdd
        fillColor.setFill()
        bezier21Path.fill()
        strokeColor.setStroke()
        bezier21Path.lineWidth = 1.5
        bezier21Path.miterLimit = 4
        bezier21Path.stroke()


        //// Bezier 22 Drawing
        let bezier22Path = NSBezierPath()
        bezier22Path.move(to: NSPoint(x: 30, y: 16.5))
        bezier22Path.line(to: NSPoint(x: 31.5, y: 14))
        bezier22Path.line(to: NSPoint(x: 11.5, y: 14))
        bezier22Path.line(to: NSPoint(x: 13, y: 16.5))
        bezier22Path.windingRule = .evenOdd
        fillColor.setFill()
        bezier22Path.fill()
        strokeColor.setStroke()
        bezier22Path.lineWidth = 1.5
        bezier22Path.miterLimit = 4
        bezier22Path.lineCapStyle = .round
        bezier22Path.lineJoinStyle = .round
        bezier22Path.stroke()


        //// Bezier 23 Drawing
        let bezier23Path = NSBezierPath()
        bezier23Path.move(to: NSPoint(x: 10, y: 32))
        bezier23Path.line(to: NSPoint(x: 33, y: 32))
        strokeColor.setStroke()
        bezier23Path.lineWidth = 1.5
        bezier23Path.miterLimit = 4
        bezier23Path.lineCapStyle = .round
        bezier23Path.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawRook_black(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Color Declarations
        let strokeColor = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let fillColor2 = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let strokeColor2 = NSColor(red: 1, green: 1, blue: 1, alpha: 1)

        //// Group 2
        //// Rectangle Drawing
        let rectanglePath = NSBezierPath(rect: NSRect(x: 8.15, y: 6.5, width: 27, height: 3))
        fillColor2.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = NSBezierPath(rect: NSRect(x: 8.15, y: 6.5, width: 27, height: 3))
        strokeColor.setStroke()
        rectangle2Path.lineWidth = 1.5
        rectangle2Path.stroke()


        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 11.67, y: 13.5))
        bezierPath.line(to: NSPoint(x: 13.17, y: 16))
        bezierPath.line(to: NSPoint(x: 30.17, y: 16))
        bezierPath.line(to: NSPoint(x: 31.67, y: 13.5))
        bezierPath.line(to: NSPoint(x: 11.67, y: 13.5))
        bezierPath.close()
        bezierPath.windingRule = .evenOdd
        fillColor2.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = NSBezierPath()
        bezier2Path.move(to: NSPoint(x: 11.67, y: 13.5))
        bezier2Path.line(to: NSPoint(x: 13.17, y: 16))
        bezier2Path.line(to: NSPoint(x: 30.17, y: 16))
        bezier2Path.line(to: NSPoint(x: 31.67, y: 13.5))
        bezier2Path.line(to: NSPoint(x: 11.67, y: 13.5))
        bezier2Path.close()
        strokeColor.setStroke()
        bezier2Path.lineWidth = 1.5
        bezier2Path.miterLimit = 1.5
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()


        //// Rectangle 6 Drawing
        let rectangle6Path = NSBezierPath(rect: NSRect(x: 11.15, y: 9.5, width: 21, height: 4))
        fillColor2.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = NSBezierPath(rect: NSRect(x: 11.15, y: 9.5, width: 21, height: 4))
        strokeColor.setStroke()
        rectangle7Path.lineWidth = 1.5
        rectangle7Path.stroke()


        //// Rectangle 8 Drawing
        let rectangle8Path = NSBezierPath(rect: NSRect(x: 13.15, y: 16, width: 17, height: 13))
        fillColor2.setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = NSBezierPath(rect: NSRect(x: 13.15, y: 16, width: 17, height: 13))
        strokeColor.setStroke()
        rectangle9Path.lineWidth = 1.5
        rectangle9Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = NSBezierPath()
        bezier3Path.move(to: NSPoint(x: 13.17, y: 29))
        bezier3Path.line(to: NSPoint(x: 10.17, y: 31.5))
        bezier3Path.line(to: NSPoint(x: 33.17, y: 31.5))
        bezier3Path.line(to: NSPoint(x: 30.17, y: 29))
        bezier3Path.line(to: NSPoint(x: 13.17, y: 29))
        bezier3Path.close()
        bezier3Path.windingRule = .evenOdd
        fillColor2.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = NSBezierPath()
        bezier4Path.move(to: NSPoint(x: 13.17, y: 29))
        bezier4Path.line(to: NSPoint(x: 10.17, y: 31.5))
        bezier4Path.line(to: NSPoint(x: 33.17, y: 31.5))
        bezier4Path.line(to: NSPoint(x: 30.17, y: 29))
        bezier4Path.line(to: NSPoint(x: 13.17, y: 29))
        bezier4Path.close()
        strokeColor.setStroke()
        bezier4Path.lineWidth = 1.5
        bezier4Path.miterLimit = 1.5
        bezier4Path.lineJoinStyle = .round
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = NSBezierPath()
        bezier5Path.move(to: NSPoint(x: 10.17, y: 31.5))
        bezier5Path.line(to: NSPoint(x: 10.17, y: 36.5))
        bezier5Path.line(to: NSPoint(x: 14.17, y: 36.5))
        bezier5Path.line(to: NSPoint(x: 14.17, y: 34.5))
        bezier5Path.line(to: NSPoint(x: 19.17, y: 34.5))
        bezier5Path.line(to: NSPoint(x: 19.17, y: 36.5))
        bezier5Path.line(to: NSPoint(x: 24.17, y: 36.5))
        bezier5Path.line(to: NSPoint(x: 24.17, y: 34.5))
        bezier5Path.line(to: NSPoint(x: 29.17, y: 34.5))
        bezier5Path.line(to: NSPoint(x: 29.17, y: 36.5))
        bezier5Path.line(to: NSPoint(x: 33.17, y: 36.5))
        bezier5Path.line(to: NSPoint(x: 33.17, y: 31.5))
        bezier5Path.line(to: NSPoint(x: 10.17, y: 31.5))
        bezier5Path.close()
        bezier5Path.windingRule = .evenOdd
        fillColor2.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = NSBezierPath()
        bezier6Path.move(to: NSPoint(x: 10.17, y: 31.5))
        bezier6Path.line(to: NSPoint(x: 10.17, y: 36.5))
        bezier6Path.line(to: NSPoint(x: 14.17, y: 36.5))
        bezier6Path.line(to: NSPoint(x: 14.17, y: 34.5))
        bezier6Path.line(to: NSPoint(x: 19.17, y: 34.5))
        bezier6Path.line(to: NSPoint(x: 19.17, y: 36.5))
        bezier6Path.line(to: NSPoint(x: 24.17, y: 36.5))
        bezier6Path.line(to: NSPoint(x: 24.17, y: 34.5))
        bezier6Path.line(to: NSPoint(x: 29.17, y: 34.5))
        bezier6Path.line(to: NSPoint(x: 29.17, y: 36.5))
        bezier6Path.line(to: NSPoint(x: 33.17, y: 36.5))
        bezier6Path.line(to: NSPoint(x: 33.17, y: 31.5))
        bezier6Path.line(to: NSPoint(x: 10.17, y: 31.5))
        bezier6Path.close()
        strokeColor.setStroke()
        bezier6Path.lineWidth = 1.5
        bezier6Path.miterLimit = 1.5
        bezier6Path.lineJoinStyle = .round
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = NSBezierPath()
        bezier7Path.move(to: NSPoint(x: 11.17, y: 10))
        bezier7Path.line(to: NSPoint(x: 32.17, y: 10))
        bezier7Path.line(to: NSPoint(x: 32.17, y: 10))
        strokeColor2.setStroke()
        bezier7Path.lineWidth = 1
        bezier7Path.miterLimit = 1
        bezier7Path.lineCapStyle = .round
        bezier7Path.stroke()


        //// Bezier 8 Drawing
        let bezier8Path = NSBezierPath()
        bezier8Path.move(to: NSPoint(x: 12.17, y: 14))
        bezier8Path.line(to: NSPoint(x: 31.17, y: 14))
        strokeColor2.setStroke()
        bezier8Path.lineWidth = 1
        bezier8Path.miterLimit = 1
        bezier8Path.lineCapStyle = .round
        bezier8Path.stroke()


        //// Bezier 9 Drawing
        let bezier9Path = NSBezierPath()
        bezier9Path.move(to: NSPoint(x: 13.17, y: 16))
        bezier9Path.line(to: NSPoint(x: 30.17, y: 16))
        strokeColor2.setStroke()
        bezier9Path.lineWidth = 1
        bezier9Path.miterLimit = 1
        bezier9Path.lineCapStyle = .round
        bezier9Path.stroke()


        //// Bezier 10 Drawing
        let bezier10Path = NSBezierPath()
        bezier10Path.move(to: NSPoint(x: 13.17, y: 29))
        bezier10Path.line(to: NSPoint(x: 30.17, y: 29))
        strokeColor2.setStroke()
        bezier10Path.lineWidth = 1
        bezier10Path.miterLimit = 1
        bezier10Path.lineCapStyle = .round
        bezier10Path.stroke()


        //// Bezier 11 Drawing
        let bezier11Path = NSBezierPath()
        bezier11Path.move(to: NSPoint(x: 10.17, y: 31.5))
        bezier11Path.line(to: NSPoint(x: 33.17, y: 31.5))
        strokeColor2.setStroke()
        bezier11Path.lineWidth = 1
        bezier11Path.miterLimit = 1
        bezier11Path.lineCapStyle = .round
        bezier11Path.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawPawn_white(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Color Declarations
        let strokeColor = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let fillColor = NSColor(red: 1, green: 1, blue: 1, alpha: 1)

        //// Group 8
        //// Bezier 24 Drawing
        let bezier24Path = NSBezierPath()
        bezier24Path.move(to: NSPoint(x: 22, y: 37))
        bezier24Path.curve(to: NSPoint(x: 18, y: 33), controlPoint1: NSPoint(x: 19.79, y: 37), controlPoint2: NSPoint(x: 18, y: 35.21))
        bezier24Path.curve(to: NSPoint(x: 18.78, y: 30.62), controlPoint1: NSPoint(x: 18, y: 32.11), controlPoint2: NSPoint(x: 18.29, y: 31.29))
        bezier24Path.curve(to: NSPoint(x: 15.5, y: 25), controlPoint1: NSPoint(x: 16.83, y: 29.5), controlPoint2: NSPoint(x: 15.5, y: 27.41))
        bezier24Path.curve(to: NSPoint(x: 17.91, y: 19.97), controlPoint1: NSPoint(x: 15.5, y: 22.97), controlPoint2: NSPoint(x: 16.44, y: 21.16))
        bezier24Path.curve(to: NSPoint(x: 10.5, y: 6.5), controlPoint1: NSPoint(x: 14.91, y: 18.91), controlPoint2: NSPoint(x: 10.5, y: 14.42))
        bezier24Path.line(to: NSPoint(x: 33.5, y: 6.5))
        bezier24Path.curve(to: NSPoint(x: 26.09, y: 19.97), controlPoint1: NSPoint(x: 33.5, y: 14.42), controlPoint2: NSPoint(x: 29.09, y: 18.91))
        bezier24Path.curve(to: NSPoint(x: 28.5, y: 25), controlPoint1: NSPoint(x: 27.56, y: 21.16), controlPoint2: NSPoint(x: 28.5, y: 22.97))
        bezier24Path.curve(to: NSPoint(x: 25.22, y: 30.62), controlPoint1: NSPoint(x: 28.5, y: 27.41), controlPoint2: NSPoint(x: 27.17, y: 29.5))
        bezier24Path.curve(to: NSPoint(x: 26, y: 33), controlPoint1: NSPoint(x: 25.71, y: 31.29), controlPoint2: NSPoint(x: 26, y: 32.11))
        bezier24Path.curve(to: NSPoint(x: 22, y: 37), controlPoint1: NSPoint(x: 26, y: 35.21), controlPoint2: NSPoint(x: 24.21, y: 37))
        bezier24Path.close()
        fillColor.setFill()
        bezier24Path.fill()
        strokeColor.setStroke()
        bezier24Path.lineWidth = 1.5
        bezier24Path.miterLimit = 4
        bezier24Path.lineCapStyle = .round
        bezier24Path.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawPawn_black(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)


        //// Color Declarations
        let strokeColor = NSColor(red: 0, green: 0, blue: 0, alpha: 1)
        let fillColor2 = NSColor(red: 0, green: 0, blue: 0, alpha: 1)

        //// Group 16
        //// Bezier 52 Drawing
        let bezier52Path = NSBezierPath()
        bezier52Path.move(to: NSPoint(x: 22, y: 37))
        bezier52Path.curve(to: NSPoint(x: 18, y: 33), controlPoint1: NSPoint(x: 19.79, y: 37), controlPoint2: NSPoint(x: 18, y: 35.21))
        bezier52Path.curve(to: NSPoint(x: 18.78, y: 30.62), controlPoint1: NSPoint(x: 18, y: 32.11), controlPoint2: NSPoint(x: 18.29, y: 31.29))
        bezier52Path.curve(to: NSPoint(x: 15.5, y: 25), controlPoint1: NSPoint(x: 16.83, y: 29.5), controlPoint2: NSPoint(x: 15.5, y: 27.41))
        bezier52Path.curve(to: NSPoint(x: 17.91, y: 19.97), controlPoint1: NSPoint(x: 15.5, y: 22.97), controlPoint2: NSPoint(x: 16.44, y: 21.16))
        bezier52Path.curve(to: NSPoint(x: 10.5, y: 6.5), controlPoint1: NSPoint(x: 14.91, y: 18.91), controlPoint2: NSPoint(x: 10.5, y: 14.42))
        bezier52Path.line(to: NSPoint(x: 33.5, y: 6.5))
        bezier52Path.curve(to: NSPoint(x: 26.09, y: 19.97), controlPoint1: NSPoint(x: 33.5, y: 14.42), controlPoint2: NSPoint(x: 29.09, y: 18.91))
        bezier52Path.curve(to: NSPoint(x: 28.5, y: 25), controlPoint1: NSPoint(x: 27.56, y: 21.16), controlPoint2: NSPoint(x: 28.5, y: 22.97))
        bezier52Path.curve(to: NSPoint(x: 25.22, y: 30.62), controlPoint1: NSPoint(x: 28.5, y: 27.41), controlPoint2: NSPoint(x: 27.17, y: 29.5))
        bezier52Path.curve(to: NSPoint(x: 26, y: 33), controlPoint1: NSPoint(x: 25.71, y: 31.29), controlPoint2: NSPoint(x: 26, y: 32.11))
        bezier52Path.curve(to: NSPoint(x: 22, y: 37), controlPoint1: NSPoint(x: 26, y: 35.21), controlPoint2: NSPoint(x: 24.21, y: 37))
        bezier52Path.close()
        fillColor2.setFill()
        bezier52Path.fill()
        strokeColor.setStroke()
        bezier52Path.lineWidth = 1.5
        bezier52Path.miterLimit = 4
        bezier52Path.lineCapStyle = .round
        bezier52Path.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }




    @objc(PaintcodeResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }

            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
